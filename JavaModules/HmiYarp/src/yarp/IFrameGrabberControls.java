/*******************************************************************************
 * Copyright (C) 2009-2020 Human Media Interaction, University of Twente, the Netherlands
 *
 * This file is part of the Articulated Social Agents Platform BML realizer (ASAPRealizer).
 *
 * ASAPRealizer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL) as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ASAPRealizer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ASAPRealizer.  If not, see http://www.gnu.org/licenses/.
 ******************************************************************************/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class IFrameGrabberControls {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IFrameGrabberControls(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IFrameGrabberControls obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        yarpJNI.delete_IFrameGrabberControls(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean setBrightness(double v) {
    return yarpJNI.IFrameGrabberControls_setBrightness(swigCPtr, this, v);
  }

  public boolean setExposure(double v) {
    return yarpJNI.IFrameGrabberControls_setExposure(swigCPtr, this, v);
  }

  public boolean setSharpness(double v) {
    return yarpJNI.IFrameGrabberControls_setSharpness(swigCPtr, this, v);
  }

  public boolean setWhiteBalance(double blue, double red) {
    return yarpJNI.IFrameGrabberControls_setWhiteBalance(swigCPtr, this, blue, red);
  }

  public boolean setHue(double v) {
    return yarpJNI.IFrameGrabberControls_setHue(swigCPtr, this, v);
  }

  public boolean setSaturation(double v) {
    return yarpJNI.IFrameGrabberControls_setSaturation(swigCPtr, this, v);
  }

  public boolean setGamma(double v) {
    return yarpJNI.IFrameGrabberControls_setGamma(swigCPtr, this, v);
  }

  public boolean setShutter(double v) {
    return yarpJNI.IFrameGrabberControls_setShutter(swigCPtr, this, v);
  }

  public boolean setGain(double v) {
    return yarpJNI.IFrameGrabberControls_setGain(swigCPtr, this, v);
  }

  public boolean setIris(double v) {
    return yarpJNI.IFrameGrabberControls_setIris(swigCPtr, this, v);
  }

  public double getBrightness() {
    return yarpJNI.IFrameGrabberControls_getBrightness(swigCPtr, this);
  }

  public double getExposure() {
    return yarpJNI.IFrameGrabberControls_getExposure(swigCPtr, this);
  }

  public double getSharpness() {
    return yarpJNI.IFrameGrabberControls_getSharpness(swigCPtr, this);
  }

  public boolean getWhiteBalance(SWIGTYPE_p_double blue, SWIGTYPE_p_double red) {
    return yarpJNI.IFrameGrabberControls_getWhiteBalance(swigCPtr, this, SWIGTYPE_p_double.getCPtr(blue), SWIGTYPE_p_double.getCPtr(red));
  }

  public double getHue() {
    return yarpJNI.IFrameGrabberControls_getHue(swigCPtr, this);
  }

  public double getSaturation() {
    return yarpJNI.IFrameGrabberControls_getSaturation(swigCPtr, this);
  }

  public double getGamma() {
    return yarpJNI.IFrameGrabberControls_getGamma(swigCPtr, this);
  }

  public double getShutter() {
    return yarpJNI.IFrameGrabberControls_getShutter(swigCPtr, this);
  }

  public double getGain() {
    return yarpJNI.IFrameGrabberControls_getGain(swigCPtr, this);
  }

  public double getIris() {
    return yarpJNI.IFrameGrabberControls_getIris(swigCPtr, this);
  }

}
