/*******************************************************************************
 * Copyright (C) 2009-2020 Human Media Interaction, University of Twente, the Netherlands
 *
 * This file is part of the Articulated Social Agents Platform BML realizer (ASAPRealizer).
 *
 * ASAPRealizer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL) as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ASAPRealizer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ASAPRealizer.  If not, see http://www.gnu.org/licenses/.
 ******************************************************************************/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yarp;

public class DeviceResponder extends PortReader {
  private long swigCPtr;

  protected DeviceResponder(long cPtr, boolean cMemoryOwn) {
    super(yarpJNI.DeviceResponder_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DeviceResponder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        yarpJNI.delete_DeviceResponder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DeviceResponder() {
    this(yarpJNI.new_DeviceResponder(), true);
  }

  public void addUsage(String txt, String explain) {
    yarpJNI.DeviceResponder_addUsage__SWIG_0(swigCPtr, this, txt, explain);
  }

  public void addUsage(String txt) {
    yarpJNI.DeviceResponder_addUsage__SWIG_1(swigCPtr, this, txt);
  }

  public void addUsage(Bottle bot, String explain) {
    yarpJNI.DeviceResponder_addUsage__SWIG_2(swigCPtr, this, Bottle.getCPtr(bot), bot, explain);
  }

  public void addUsage(Bottle bot) {
    yarpJNI.DeviceResponder_addUsage__SWIG_3(swigCPtr, this, Bottle.getCPtr(bot), bot);
  }

  public boolean respond(Bottle command, Bottle reply) {
    return yarpJNI.DeviceResponder_respond(swigCPtr, this, Bottle.getCPtr(command), command, Bottle.getCPtr(reply), reply);
  }

  public boolean read(ConnectionReader connection) {
    return yarpJNI.DeviceResponder_read(swigCPtr, this, ConnectionReader.getCPtr(connection), connection);
  }

  public void onRead(Bottle v) {
    yarpJNI.DeviceResponder_onRead(swigCPtr, this, Bottle.getCPtr(v), v);
  }

  public void makeUsage() {
    yarpJNI.DeviceResponder_makeUsage(swigCPtr, this);
  }

  public void attach(TypedReaderBottle source) {
    yarpJNI.DeviceResponder_attach(swigCPtr, this, TypedReaderBottle.getCPtr(source), source);
  }

}
