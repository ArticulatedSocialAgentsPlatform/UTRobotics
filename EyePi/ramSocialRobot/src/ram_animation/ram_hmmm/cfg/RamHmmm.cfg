#!/usr/bin/env python
# HMMM node configuration

PACKAGE = "ram_hmmm"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
display = gen.add_group("Display")
camera = gen.add_group("Camera")
saliency = gen.add_group("Saliency")
emotion = gen.add_group("Emotion")
action = gen.add_group("Action")
sequence = gen.add_group("Sequence")

# Name, Type, Reconfiguration level, Description, Default, Min, Max
display.add("display_incoming_saliency_map", bool_t, 0, "Show incoming saliency", False);
display.add("display_calculated_saliency_map", bool_t, 0, "Show incoming saliency", False);

camera.add("saliency_x_res", int_t, 0, "X-resolution of the input", 640, 0, 1920)
camera.add("saliency_y_res", int_t, 0, "Y-resolution of the input", 640, 0, 1920)
camera.add("saliency_x_to_joint", double_t, 0, "X-resolution to the motor resolution. Defaults: no lens = 1.1, wide angle = 1.3", 1.20, 0, 3)
camera.add("use_saccade", bool_t, 0, "Use saccade for the head movement", True);
camera.add("saliency_x_to_face", double_t, 0, "X-mapping to face movement", 80, 0, 128)
camera.add("saliency_y_to_face", double_t, 0, "Y-mapping to face movement", 128, 0, 128)

saliency.add("saliency_buffer", int_t, 0, "Amount of messages that will be buffered", 2, 0, 10)
saliency.add("saliency_pixel_margin_x", int_t, 0, "Amount of pixels in X to group with (both directions)", 40, 1, 100)
saliency.add("saliency_pixel_margin_y", int_t, 0, "Amount of pixels in Y to group with (both directions)", 40, 1, 100)
saliency.add("saliency_remove_speed", int_t, 0, "Amount of messages not seen", 5, 1, 20)
saliency.add("saliency_weight_factor", double_t, 0, "Weight of every new message", 0.8, 0, 1)
saliency.add("saliency_used_weight", double_t, 0, "When used, multiply it with this number to lower the chance of being salient", 0.995, 0.9, 1.0)
saliency.add("saliency_recover_weight", double_t, 0, "When penalized (no longer most salient), recover the saliency of the point over time", 1.03, 1.0, 1.1)
saliency.add("saliency_not_reported_weight", double_t, 0, "When not reported, this factor indicated the weight of the loss", 1.5, 1, 3.0)
saliency.add("saliency_chosen_bonus", double_t, 0, "When a point is chosen, assign a bonus", 3, 1, 10)
saliency.add("saliency_timeout", double_t, 0, "Used to determine the timeout of any input in seconds", 5.0, 1.0, 20.0)

emotion.add("emotion_buffer", int_t, 0, "Amount of messages that will be buffered", 2, 0, 10)
emotion.add("emotion_amazed_speed", double_t, 0, "Speed of the amazed emotion on a new object", 0.2, 0, 1)
emotion.add("emotion_reset_speed", double_t, 0, "Speed to reset the activated emotion", 0.5, 0, 2)
emotion.add("emotion_replace_difference", int_t, 0, "How fast a emotion should be instantly replaced", 20, 0, 200)
emotion.add("emotion_weight_factor", double_t, 0, "Weight of every new message", 0.8, 0, 1)

action.add("action_surprised_threshold", int_t, 0, "Threshold for surprised action", 1000, 100, 5000)
action.add("action_surprised_timeout", double_t, 0, "Timeout for the emotion after execution", 5.0, 0, 10)

sequence.add("sequence_buffer", int_t, 0, "Amount of messages that will be buffered", 2, 0, 10)

exit(gen.generate(PACKAGE, "ram_hmmm", "RamHmmm"))