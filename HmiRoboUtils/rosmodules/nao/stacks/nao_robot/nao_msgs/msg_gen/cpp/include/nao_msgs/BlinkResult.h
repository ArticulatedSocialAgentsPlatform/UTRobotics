/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/msg/BlinkResult.msg */
#ifndef NAO_MSGS_MESSAGE_BLINKRESULT_H
#define NAO_MSGS_MESSAGE_BLINKRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace nao_msgs
{
template <class ContainerAllocator>
struct BlinkResult_ {
  typedef BlinkResult_<ContainerAllocator> Type;

  BlinkResult_()
  : still_blinking(false)
  {
  }

  BlinkResult_(const ContainerAllocator& _alloc)
  : still_blinking(false)
  {
  }

  typedef uint8_t _still_blinking_type;
  uint8_t still_blinking;


  typedef boost::shared_ptr< ::nao_msgs::BlinkResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::BlinkResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlinkResult
typedef  ::nao_msgs::BlinkResult_<std::allocator<void> > BlinkResult;

typedef boost::shared_ptr< ::nao_msgs::BlinkResult> BlinkResultPtr;
typedef boost::shared_ptr< ::nao_msgs::BlinkResult const> BlinkResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nao_msgs::BlinkResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nao_msgs::BlinkResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::BlinkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "53e041b81450f9247036f13b3c0bf822";
  }

  static const char* value(const  ::nao_msgs::BlinkResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x53e041b81450f924ULL;
  static const uint64_t static_value2 = 0x7036f13b3c0bf822ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::BlinkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/BlinkResult";
  }

  static const char* value(const  ::nao_msgs::BlinkResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::BlinkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
bool still_blinking\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::BlinkResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::BlinkResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::BlinkResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.still_blinking);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlinkResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_msgs::BlinkResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nao_msgs::BlinkResult_<ContainerAllocator> & v) 
  {
    s << indent << "still_blinking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.still_blinking);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NAO_MSGS_MESSAGE_BLINKRESULT_H

