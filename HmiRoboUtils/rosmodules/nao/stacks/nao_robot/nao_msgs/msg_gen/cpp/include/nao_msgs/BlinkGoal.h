/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/msg/BlinkGoal.msg */
#ifndef NAO_MSGS_MESSAGE_BLINKGOAL_H
#define NAO_MSGS_MESSAGE_BLINKGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/ColorRGBA.h"
#include "std_msgs/ColorRGBA.h"

namespace nao_msgs
{
template <class ContainerAllocator>
struct BlinkGoal_ {
  typedef BlinkGoal_<ContainerAllocator> Type;

  BlinkGoal_()
  : colors()
  , bg_color()
  , blink_duration()
  , blink_rate_mean(0.0)
  , blink_rate_sd(0.0)
  {
  }

  BlinkGoal_(const ContainerAllocator& _alloc)
  : colors(_alloc)
  , bg_color(_alloc)
  , blink_duration()
  , blink_rate_mean(0.0)
  , blink_rate_sd(0.0)
  {
  }

  typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  _colors_type;
  std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  colors;

  typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _bg_color_type;
   ::std_msgs::ColorRGBA_<ContainerAllocator>  bg_color;

  typedef ros::Duration _blink_duration_type;
  ros::Duration blink_duration;

  typedef float _blink_rate_mean_type;
  float blink_rate_mean;

  typedef float _blink_rate_sd_type;
  float blink_rate_sd;


  typedef boost::shared_ptr< ::nao_msgs::BlinkGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::BlinkGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlinkGoal
typedef  ::nao_msgs::BlinkGoal_<std::allocator<void> > BlinkGoal;

typedef boost::shared_ptr< ::nao_msgs::BlinkGoal> BlinkGoalPtr;
typedef boost::shared_ptr< ::nao_msgs::BlinkGoal const> BlinkGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nao_msgs::BlinkGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nao_msgs::BlinkGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::BlinkGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5e5d3c2ba9976dc121a0bb6ef7c66d79";
  }

  static const char* value(const  ::nao_msgs::BlinkGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5e5d3c2ba9976dc1ULL;
  static const uint64_t static_value2 = 0x21a0bb6ef7c66d79ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::BlinkGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/BlinkGoal";
  }

  static const char* value(const  ::nao_msgs::BlinkGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::BlinkGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal: colours to use for blinking, plus blinking rate mean and sd\n\
# Result: true if robot is still blinking (call was pre-empted by another user)\n\
# Feedback: last blinked colour\n\
std_msgs/ColorRGBA[] colors\n\
std_msgs/ColorRGBA bg_color\n\
duration blink_duration\n\
float32 blink_rate_mean\n\
float32 blink_rate_sd\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::BlinkGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::BlinkGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.colors);
    stream.next(m.bg_color);
    stream.next(m.blink_duration);
    stream.next(m.blink_rate_mean);
    stream.next(m.blink_rate_sd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlinkGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_msgs::BlinkGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nao_msgs::BlinkGoal_<ContainerAllocator> & v) 
  {
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.colors[i]);
    }
    s << indent << "bg_color: ";
s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.bg_color);
    s << indent << "blink_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.blink_duration);
    s << indent << "blink_rate_mean: ";
    Printer<float>::stream(s, indent + "  ", v.blink_rate_mean);
    s << indent << "blink_rate_sd: ";
    Printer<float>::stream(s, indent + "  ", v.blink_rate_sd);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NAO_MSGS_MESSAGE_BLINKGOAL_H

