/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/msg/TorsoIMU.msg */
#ifndef NAO_MSGS_MESSAGE_TORSOIMU_H
#define NAO_MSGS_MESSAGE_TORSOIMU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace nao_msgs
{
template <class ContainerAllocator>
struct TorsoIMU_ {
  typedef TorsoIMU_<ContainerAllocator> Type;

  TorsoIMU_()
  : header()
  , angleX(0.0)
  , angleY(0.0)
  , gyroX(0.0)
  , gyroY(0.0)
  , accelX(0.0)
  , accelY(0.0)
  , accelZ(0.0)
  {
  }

  TorsoIMU_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , angleX(0.0)
  , angleY(0.0)
  , gyroX(0.0)
  , gyroY(0.0)
  , accelX(0.0)
  , accelY(0.0)
  , accelZ(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _angleX_type;
  float angleX;

  typedef float _angleY_type;
  float angleY;

  typedef float _gyroX_type;
  float gyroX;

  typedef float _gyroY_type;
  float gyroY;

  typedef float _accelX_type;
  float accelX;

  typedef float _accelY_type;
  float accelY;

  typedef float _accelZ_type;
  float accelZ;


  typedef boost::shared_ptr< ::nao_msgs::TorsoIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::TorsoIMU_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TorsoIMU
typedef  ::nao_msgs::TorsoIMU_<std::allocator<void> > TorsoIMU;

typedef boost::shared_ptr< ::nao_msgs::TorsoIMU> TorsoIMUPtr;
typedef boost::shared_ptr< ::nao_msgs::TorsoIMU const> TorsoIMUConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nao_msgs::TorsoIMU_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nao_msgs::TorsoIMU_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::TorsoIMU_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::TorsoIMU_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::TorsoIMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "404112cb51a476613d7a445b4586a894";
  }

  static const char* value(const  ::nao_msgs::TorsoIMU_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x404112cb51a47661ULL;
  static const uint64_t static_value2 = 0x3d7a445b4586a894ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::TorsoIMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/TorsoIMU";
  }

  static const char* value(const  ::nao_msgs::TorsoIMU_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::TorsoIMU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Data from Nao's IMU, raw and filtered\n\
\n\
Header header\n\
\n\
# corrected / filtered angle to X axis (roll)\n\
float32 angleX\n\
\n\
# corrected / filtered angle to Y axis (pitch)\n\
float32 angleY\n\
\n\
# Raw data from gyroscopes\n\
float32 gyroX\n\
float32 gyroY\n\
\n\
# Raw data from accelerometers\n\
float32 accelX\n\
float32 accelY\n\
float32 accelZ\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::TorsoIMU_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::nao_msgs::TorsoIMU_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::nao_msgs::TorsoIMU_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::TorsoIMU_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.angleX);
    stream.next(m.angleY);
    stream.next(m.gyroX);
    stream.next(m.gyroY);
    stream.next(m.accelX);
    stream.next(m.accelY);
    stream.next(m.accelZ);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TorsoIMU_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_msgs::TorsoIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nao_msgs::TorsoIMU_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angleX: ";
    Printer<float>::stream(s, indent + "  ", v.angleX);
    s << indent << "angleY: ";
    Printer<float>::stream(s, indent + "  ", v.angleY);
    s << indent << "gyroX: ";
    Printer<float>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<float>::stream(s, indent + "  ", v.gyroY);
    s << indent << "accelX: ";
    Printer<float>::stream(s, indent + "  ", v.accelX);
    s << indent << "accelY: ";
    Printer<float>::stream(s, indent + "  ", v.accelY);
    s << indent << "accelZ: ";
    Printer<float>::stream(s, indent + "  ", v.accelZ);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NAO_MSGS_MESSAGE_TORSOIMU_H

