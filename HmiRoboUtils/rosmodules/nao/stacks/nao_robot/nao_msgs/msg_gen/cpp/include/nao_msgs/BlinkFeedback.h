/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/msg/BlinkFeedback.msg */
#ifndef NAO_MSGS_MESSAGE_BLINKFEEDBACK_H
#define NAO_MSGS_MESSAGE_BLINKFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/ColorRGBA.h"

namespace nao_msgs
{
template <class ContainerAllocator>
struct BlinkFeedback_ {
  typedef BlinkFeedback_<ContainerAllocator> Type;

  BlinkFeedback_()
  : last_color()
  {
  }

  BlinkFeedback_(const ContainerAllocator& _alloc)
  : last_color(_alloc)
  {
  }

  typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _last_color_type;
   ::std_msgs::ColorRGBA_<ContainerAllocator>  last_color;


  typedef boost::shared_ptr< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::BlinkFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlinkFeedback
typedef  ::nao_msgs::BlinkFeedback_<std::allocator<void> > BlinkFeedback;

typedef boost::shared_ptr< ::nao_msgs::BlinkFeedback> BlinkFeedbackPtr;
typedef boost::shared_ptr< ::nao_msgs::BlinkFeedback const> BlinkFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nao_msgs::BlinkFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nao_msgs::BlinkFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::BlinkFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f1f94fb3eb06412264f6e0c5e72cfab";
  }

  static const char* value(const  ::nao_msgs::BlinkFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f1f94fb3eb06412ULL;
  static const uint64_t static_value2 = 0x264f6e0c5e72cfabULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/BlinkFeedback";
  }

  static const char* value(const  ::nao_msgs::BlinkFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
std_msgs/ColorRGBA last_color\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::BlinkFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::BlinkFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::BlinkFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.last_color);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlinkFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_msgs::BlinkFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nao_msgs::BlinkFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "last_color: ";
s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.last_color);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NAO_MSGS_MESSAGE_BLINKFEEDBACK_H

