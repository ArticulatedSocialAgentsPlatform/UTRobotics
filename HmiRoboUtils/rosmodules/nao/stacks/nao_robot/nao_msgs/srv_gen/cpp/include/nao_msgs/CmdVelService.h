/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/srv/CmdVelService.srv */
#ifndef NAO_MSGS_SERVICE_CMDVELSERVICE_H
#define NAO_MSGS_SERVICE_CMDVELSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Twist.h"



namespace nao_msgs
{
template <class ContainerAllocator>
struct CmdVelServiceRequest_ {
  typedef CmdVelServiceRequest_<ContainerAllocator> Type;

  CmdVelServiceRequest_()
  : twist()
  {
  }

  CmdVelServiceRequest_(const ContainerAllocator& _alloc)
  : twist(_alloc)
  {
  }

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  twist;


  typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CmdVelServiceRequest
typedef  ::nao_msgs::CmdVelServiceRequest_<std::allocator<void> > CmdVelServiceRequest;

typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceRequest> CmdVelServiceRequestPtr;
typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceRequest const> CmdVelServiceRequestConstPtr;


template <class ContainerAllocator>
struct CmdVelServiceResponse_ {
  typedef CmdVelServiceResponse_<ContainerAllocator> Type;

  CmdVelServiceResponse_()
  {
  }

  CmdVelServiceResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CmdVelServiceResponse
typedef  ::nao_msgs::CmdVelServiceResponse_<std::allocator<void> > CmdVelServiceResponse;

typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceResponse> CmdVelServiceResponsePtr;
typedef boost::shared_ptr< ::nao_msgs::CmdVelServiceResponse const> CmdVelServiceResponseConstPtr;

struct CmdVelService
{

typedef CmdVelServiceRequest Request;
typedef CmdVelServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CmdVelService
} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a787b2802160dcc7fe02d089e10afe56";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa787b2802160dcc7ULL;
  static const uint64_t static_value2 = 0xfe02d089e10afe56ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdVelServiceRequest";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Twist twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdVelServiceResponse";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::CmdVelServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.twist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CmdVelServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::CmdVelServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CmdVelServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nao_msgs::CmdVelService> {
  static const char* value() 
  {
    return "a787b2802160dcc7fe02d089e10afe56";
  }

  static const char* value(const nao_msgs::CmdVelService&) { return value(); } 
};

template<>
struct DataType<nao_msgs::CmdVelService> {
  static const char* value() 
  {
    return "nao_msgs/CmdVelService";
  }

  static const char* value(const nao_msgs::CmdVelService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a787b2802160dcc7fe02d089e10afe56";
  }

  static const char* value(const nao_msgs::CmdVelServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::CmdVelServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdVelService";
  }

  static const char* value(const nao_msgs::CmdVelServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a787b2802160dcc7fe02d089e10afe56";
  }

  static const char* value(const nao_msgs::CmdVelServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::CmdVelServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdVelService";
  }

  static const char* value(const nao_msgs::CmdVelServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAO_MSGS_SERVICE_CMDVELSERVICE_H

