/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/srv/CmdPoseService.srv */
#ifndef NAO_MSGS_SERVICE_CMDPOSESERVICE_H
#define NAO_MSGS_SERVICE_CMDPOSESERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose2D.h"



namespace nao_msgs
{
template <class ContainerAllocator>
struct CmdPoseServiceRequest_ {
  typedef CmdPoseServiceRequest_<ContainerAllocator> Type;

  CmdPoseServiceRequest_()
  : pose()
  {
  }

  CmdPoseServiceRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CmdPoseServiceRequest
typedef  ::nao_msgs::CmdPoseServiceRequest_<std::allocator<void> > CmdPoseServiceRequest;

typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceRequest> CmdPoseServiceRequestPtr;
typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceRequest const> CmdPoseServiceRequestConstPtr;


template <class ContainerAllocator>
struct CmdPoseServiceResponse_ {
  typedef CmdPoseServiceResponse_<ContainerAllocator> Type;

  CmdPoseServiceResponse_()
  {
  }

  CmdPoseServiceResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CmdPoseServiceResponse
typedef  ::nao_msgs::CmdPoseServiceResponse_<std::allocator<void> > CmdPoseServiceResponse;

typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceResponse> CmdPoseServiceResponsePtr;
typedef boost::shared_ptr< ::nao_msgs::CmdPoseServiceResponse const> CmdPoseServiceResponseConstPtr;

struct CmdPoseService
{

typedef CmdPoseServiceRequest Request;
typedef CmdPoseServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CmdPoseService
} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271cb12677c4cd9bccbc642cd9258d1f";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x271cb12677c4cd9bULL;
  static const uint64_t static_value2 = 0xccbc642cd9258d1fULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdPoseServiceRequest";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Pose2D pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdPoseServiceResponse";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CmdPoseServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CmdPoseServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nao_msgs::CmdPoseService> {
  static const char* value() 
  {
    return "271cb12677c4cd9bccbc642cd9258d1f";
  }

  static const char* value(const nao_msgs::CmdPoseService&) { return value(); } 
};

template<>
struct DataType<nao_msgs::CmdPoseService> {
  static const char* value() 
  {
    return "nao_msgs/CmdPoseService";
  }

  static const char* value(const nao_msgs::CmdPoseService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271cb12677c4cd9bccbc642cd9258d1f";
  }

  static const char* value(const nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdPoseService";
  }

  static const char* value(const nao_msgs::CmdPoseServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271cb12677c4cd9bccbc642cd9258d1f";
  }

  static const char* value(const nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/CmdPoseService";
  }

  static const char* value(const nao_msgs::CmdPoseServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAO_MSGS_SERVICE_CMDPOSESERVICE_H

