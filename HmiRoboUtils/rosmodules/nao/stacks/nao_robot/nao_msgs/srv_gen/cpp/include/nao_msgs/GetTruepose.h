/* Auto-generated by genmsg_cpp for file /home/rob/ros_workspace/rosmodules/nao/stacks/nao_robot/nao_msgs/srv/GetTruepose.srv */
#ifndef NAO_MSGS_SERVICE_GETTRUEPOSE_H
#define NAO_MSGS_SERVICE_GETTRUEPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseWithCovarianceStamped.h"

namespace nao_msgs
{
template <class ContainerAllocator>
struct GetTrueposeRequest_ {
  typedef GetTrueposeRequest_<ContainerAllocator> Type;

  GetTrueposeRequest_()
  {
  }

  GetTrueposeRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTrueposeRequest
typedef  ::nao_msgs::GetTrueposeRequest_<std::allocator<void> > GetTrueposeRequest;

typedef boost::shared_ptr< ::nao_msgs::GetTrueposeRequest> GetTrueposeRequestPtr;
typedef boost::shared_ptr< ::nao_msgs::GetTrueposeRequest const> GetTrueposeRequestConstPtr;


template <class ContainerAllocator>
struct GetTrueposeResponse_ {
  typedef GetTrueposeResponse_<ContainerAllocator> Type;

  GetTrueposeResponse_()
  : pose()
  {
  }

  GetTrueposeResponse_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTrueposeResponse
typedef  ::nao_msgs::GetTrueposeResponse_<std::allocator<void> > GetTrueposeResponse;

typedef boost::shared_ptr< ::nao_msgs::GetTrueposeResponse> GetTrueposeResponsePtr;
typedef boost::shared_ptr< ::nao_msgs::GetTrueposeResponse const> GetTrueposeResponseConstPtr;

struct GetTruepose
{

typedef GetTrueposeRequest Request;
typedef GetTrueposeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTruepose
} // namespace nao_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/GetTrueposeRequest";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f3e0bbe7a24e1f929488cd1970222d3";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4f3e0bbe7a24e1f9ULL;
  static const uint64_t static_value2 = 0x29488cd1970222d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/GetTrueposeResponse";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseWithCovarianceStamped pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovarianceStamped\n\
# This expresses an estimated pose with a reference coordinate frame and timestamp\n\
\n\
Header header\n\
PoseWithCovariance pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::GetTrueposeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTrueposeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nao_msgs::GetTrueposeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTrueposeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nao_msgs::GetTruepose> {
  static const char* value() 
  {
    return "4f3e0bbe7a24e1f929488cd1970222d3";
  }

  static const char* value(const nao_msgs::GetTruepose&) { return value(); } 
};

template<>
struct DataType<nao_msgs::GetTruepose> {
  static const char* value() 
  {
    return "nao_msgs/GetTruepose";
  }

  static const char* value(const nao_msgs::GetTruepose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::GetTrueposeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f3e0bbe7a24e1f929488cd1970222d3";
  }

  static const char* value(const nao_msgs::GetTrueposeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::GetTrueposeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/GetTruepose";
  }

  static const char* value(const nao_msgs::GetTrueposeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nao_msgs::GetTrueposeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f3e0bbe7a24e1f929488cd1970222d3";
  }

  static const char* value(const nao_msgs::GetTrueposeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nao_msgs::GetTrueposeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nao_msgs/GetTruepose";
  }

  static const char* value(const nao_msgs::GetTrueposeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAO_MSGS_SERVICE_GETTRUEPOSE_H

